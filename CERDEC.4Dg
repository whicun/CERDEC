#platform "Gen4-uLCD-70DT"
#inherit "4DGL_16bitColours.fnc"
#inherit "VisualConst.inc"
#inherit "CERDECConst.inc"

// Generic
#constant ACTIVE        1
#constant INACTIVE      0
#constant TRUE          1
#constant FALSE         0
#constant OFFLINE       1
#constant ONLINE        0
#constant START_BYT     0x18
// Colors
#constant BACKGROUND_COLOR  0xDF5F
#constant LED_GOOD          LIME
#constant LED_IDLE          0x34DF
#constant LED_BAD           RED

// Forms
#constant OVERVIEW_FORM 0
#constant SHELF_FORM 1
#constant MOD_FORM 2
var current_form := OVERVIEW_FORM;
var prev_form := OVERVIEW_FORM;

// Indices
#constant TYPE  2
#constant ID    3
#constant MOD_V 4
#constant MOD_T 6
#constant MOD_A 7

// TODO: Add indices to indexers
#constant SHELF_V
#constant SHELF_T
#constant SHELF_H
#constant SHELF_L
#constant SHELF_ID
#constant SHELF_A
#constant SHELF_E

// Structures

// Shelves have 9 major characteristics
// 1) Total Voltage, Float: 2 Bytes
// 2) Avg. Temp, Int: 1 Byte
// 3) Highest Temp, Float: 1 Byte
// 4) Lowest Temp, Float: 1 Bytes
// 5) ID Highest/Lowest Temp, Int: 1 Byte
// 6) X Position,  Int: 1 Byte
// 7) Y Position,  Int: 1 Byte
// 8) Good Button handle, Ptr: 1 Byte
// 9) Bad Button handle, Ptr: 1 Byte
var shelf0[12];
var *shelf_ptr;
var shelf_volt[2];
var shelf_temp[2];

// Modules have 7 major characteristics
// 1) Voltage, Float: 2 Bytes
// 2) Temperature, Int: 1 Byte
// 3) Alarm/Error, Int: 1 Byte
// 4) X Position,  Int: 1 Byte
// 5) Y Position,  Int: 1 Byte
// 6) Good Button handle, Ptr: 1 Byte
// 7) Bad Button handle, Ptr: 1 Byte
var mod0[8];
var mod1[8];
var mod2[8];
var mod3[8];
var mod4[8];
var mod5[8];
var mod6[8];
var mod7[8];
var mod8[8];
var mods[9] := [mod0, mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8];
var current_mod := 0;
var *mod_ptr_1;
var *mod_ptr_2;
var mod_volt[2];
var mod_temp[2];


func main()

    // Mount the drive
    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif

    // Get file handle
    hndl := file_LoadImageControl("CERDEC.dat", "CERDEC.gci", 1);

    // Basic initialization stuff
    gfx_Set(SCREEN_MODE, LANDSCAPE) ;

    // Enter the forever loop
    repeat

        // Send Commands
        if(current_form == SHELF_FORM || current_form == MOD_FORM)

            var current_shelf := 0;
            request_all_shelf_mods(current_shelf);

        endif
        // Read Commands
        process_input();

        // Update the view

        // Check for user input

        // React to user input

    forever

endfunc

// Prints the system voltage
// Sums the voltage from each shelf
func print_system_voltage(var x_pos, var y_pos)

    var sys_volt[2];

    sys_volt := calc_system_voltage();

    gfx_MoveTo(x_pos, y_pos);
    flt_PRINT(sys_volt, "%-.0f");

endfunc

// Calculates the system voltage
// By summing up each shelf's voltage
func calc_system_voltage()

    var sys_volt[2];

    // Init the system voltage
    flt_VAL(sys_volt, "0.0");

    // Sum the voltages
    var i;
    for(i := 0; i < 3; i++)

        calc_shelf_voltage(i);

        // Add current shelf voltage to system voltage
        flt_ADD(sys_volt, sys_volt, shelf_volt);
    next

    return sys_volt;

endfunc

// Prints off the voltage given a 16 bit int
func print_shelf_voltage(var shelf, var x_pos, var y_pos)

    // Setting up float arrays
    var volt_flt[2];

    calc_shelf_voltage(shelf);

    // Print it at desired location
    gfx_MoveTo(x_pos, y_pos);
    flt_PRINT(volt_flt, "%-.0f");

endfunc

// Calculates the voltage given a 16 bit int for a shelf
func calc_shelf_voltage(var shelf)

    get_shelf(shelf);

    var volt_int;
    volt_int := shelf_ptr[0];

    // Setting up float arrays
    var volt_flt[2], temp_flt[2];

    // Convert to float
    flt_ITOF(volt_flt, volt_int);

    // Create multiplication factor
    flt_VAL(temp_flt, "0.02");

    // (voltage = [0xUpperByte,0xLowerByte] * 0.02)
    flt_MUL(shelf_volt, volt_flt, temp_flt);

endfunc

// Calculates the voltage given a 16 bit int for a mod
func calc_mod_voltage(var volt_int)

    // Setting up float arrays
    var volt_flt[2], temp_flt[2];

    // Convert to float
    flt_ITOF(volt_flt, volt_int);

    // Create multiplication factor
    flt_VAL(temp_flt, "0.02");

    // (voltage = [0xUpperByte,0xLowerByte] * 0.02)
    flt_MUL(volt_mod, volt_flt, temp_flt);

endfunc

// Prints off the temperature given a 8+ bit int
func print_temperature(var temp_int, var x_pos, var y_pos)

    var temp_flt[2];

    temp_flt := calc_temperature(temp_int);

    gfx_MoveTo(x_pos, y_pos);
    flt_PRINT(temp_flt, "%-.0f");

endfunc

// Calculates the temperature given an 8+ bit int
func calc_temperature(var temp_int)

    var temp_flt_1[2], temp_flt_2[2];

    // Get the temperature
    flt_VAL(temp_flt_1, "0.5");
    flt_ITOF(temp_flt_2, temp_int);
    flt_MUL(temp_flt_1, temp_flt_1, temp_flt_2);

    return temp_flt_1;

endfunc

// Basic Shelf Get/Set
// Sets the global shelf_ptr to 'shelf'
func get_shelf(var shelf)

    shelf_ptr := shelf0;

endfunc

// Updates the shelf_ptr shelf's info
func set_shelf(var data)

    shelf_ptr[0] := data[SHELF_V];
    shelf_ptr[1] := data[SHELF_V + 1];
    shelf_ptr[2] := data[SHELF_T];
    shelf_ptr[3] := data[SHELF_H];
    shelf_ptr[4] := data[SHELF_L];
    shelf_ptr[5] := data[SHELF_ID];
    shelf_ptr[6] := data[SHELF_A];
    shelf_ptr[7] := data[SHELF_E];

endfunc

// Basic Mod Get/Set
// Sets the global mod_ptr_1 to 'even' mod (0, 2, 4, ...)
// Sets the global mod_ptr_2 to 'odd' mod (1, 3, 5, ...)
func get_mods(var shelf, var mod)

    var mods_per_shelf := 12;
    mod_ptr_1 := mods[mod + (shelf * mods_per_shelf)];
    mod_ptr_2 := mods[mod + (shelf * mods_per_shelf) + 1];

endfunc

// Updates the mod_ptr_1 & mod_ptr_2 mods' infos
func set_mods(var data)

    // Get the voltage
    mod_ptr_1[0] := data[MOD_V];
    mod_ptr_1[1] := data[MOD_V + 1];
    mod_ptr_2[0] := data[MOD_V + 4];
    mod_ptr_2[1] := data[MOD_V + 4 + 1];

    // Get the temperature
    mod_ptr_1[2] := data[MOD_T];
    mod_ptr_2[2] := data[MOD_T + 4];

    // Get the Alarm/Error
    mod_ptr_1[3] := data[MOD_A];
    mod_ptr_2[3] := data[MOD_A + 4];
endfunc

// Requests the basic module info
// Sends out the "B#" command
func request_mod(var shelf, var mod)

    var cmd[7];
    cmd[0] := 0x18;
    cmd[1] := 0xEA;
    cmd[2] := shelf;
    cmd[3] := 0x0F;
    cmd[4] := (0xB0) + (mod/2);
    cmd[5] := 0xFF;
    cmd[6] := 0x00;

    var i;
    for(i := 0; i < 7; i++)
        serout1(cmd[i]);
    next

endfunc

// Sends a request for all the mods on the current shelf
func request_all_shelf_mods(var shelf)

    var mods_per_shelf := 12;

    var i;
    for(i := 0; i < mods_per_shelf; i += 2)
        // Send request for each mod on current shelf
        request_mod(shelf, i);
        // pause(5);
    next
endfunc

// Handles input messages
func process_input()

    var tmpByte;
    var dataByteCount := 0x0F;
    var temp_vals[15];
    var shelf_number;
    var mod_number;
    var i;

    if(com1_Count() > dataByteCount)

        // Read in the first byte
        // Should be START BYTE (0xAA)
        tmpByte := serin1();

        // Looking for the start of a message so...
        // While tmpByte isn't the Start Byte
        while(tmpByte != START_BYT)

            // If there isn't enough data
            // in the buffer for a full message
            if(com1_Count() < dataByteCount)
                return; // Leave function
            endif

            // Read in the next byte
            tmpByte := serin1();

        wend

        // Give it  5msec to breath
        pause(5);

        // Read in vals from buffer into temp array
        for(i := 0; i < dataByteCount; i++)
            temp_vals[i] := serin1();
        next

        // If it's a shelf update message
        if(temp_vals[TYPE] == 0xA0)

            // See who the message is for
            shelf_number := temp_vals[ID];

            // Get their attention
            get_shelf(shelf_number);

            // Update their info
            set_shelf(temp_vals);
        endif

        // If it's a mod update message
        if((temp_vals[TYPE] & 0xB0) == 0xB0)

            // See who the message is for
            shelf_number := temp_vals[ID];
            mod_number := ((temp_vals[TYPE] | 0xF0) & 0x0F);

            // Get their attention
            get_mods(shelf_number, mod_number);

            // Update their info
            set_mods(temp_vals);
        endif
    endif
endfunc

// Changes the buttons for status updates (aka Green button -> Red)
// *Assumes the 'enable button' is being drawn on top of 'disable button'
func update_button(var button_enable_idx, var button_disable_idx, var x_pos, var y_pos)
    // Disable 'disable button'
    img_SetAttributes(hndl, button_disable_idx, I_TOUCH_DISABLE);
    // Set position for 'enable button'
    img_SetPosition(hndl, button_enable_idx, x_pos, y_pos);
    // Enable touch
    img_ClearAttributes(hndl, button_enable_idx, I_TOUCH_DISABLE);
    // Show the button (assumed on top of 'disable button')
    img_Show(hndl, button_enable_idx);
endfunc


    // 1FrameInfo_panel 1.0 generated 11/13/2019 11:06:35 AM
    gfx_OutlineColour(SILVER) ;
    gfx_Panel(PANEL_SUNKEN, 18, 225, 270, 236, 0x8D9C) ;
    gfx_OutlineColour(BLACK) ;

    // ShelfOverCharged_LED 1.0 generated 11/13/2019 11:47:43 AM
    gfx_CircleFilled(50, 265, 20, LIMEGREEN) ;

    // ShelfOverTemp_LED 1.0 generated 11/13/2019 11:47:46 AM
    gfx_CircleFilled(50, 317, 20, LIMEGREEN) ;

    // ShelfOverDischarged_LED 1.0 generated 11/13/2019 11:47:49 AM
    gfx_CircleFilled(50, 368, 20, LIMEGREEN) ;

    // ShelfError_LED 1.0 generated 11/13/2019 11:47:52 AM
    gfx_CircleFilled(50, 425, 20, LIMEGREEN) ;

    // ShelfOverCharge_Label 1.0 generated 11/13/2019 12:01:32 PM
    img_Show(hndl,iShelfOverCharge_Label) ;

    // ShelfOverTemp_Label 1.0 generated 11/13/2019 12:01:35 PM
    img_Show(hndl,iShelfOverTemp_Label) ;

    // OverDischarged_Label 1.0 generated 11/13/2019 12:01:38 PM
    img_Show(hndl,iOverDischarged_Label) ;

    // ShelfError_Label 1.0 generated 11/13/2019 12:01:40 PM
    img_Show(hndl,iShelfError_Label) ;

    // Panel12 1.0 generated 11/13/2019 12:04:10 PM
    gfx_Panel(PANEL_SUNKEN, 160, 406, 108, 35, WHITE) ;

    // ShelfAlarms_Title 1.0 generated 11/13/2019 12:04:56 PM
    img_Show(hndl,iShelfAlarms_Title) ;

    // !1TempsPanel13 1.0 generated 11/13/2019 12:06:46 PM
    gfx_OutlineColour(SILVER) ;
    gfx_Panel(PANEL_SUNKEN, 296, 225, 324, 236, 0x8D9C) ;
    gfx_OutlineColour(BLACK) ;



    // Panel19 1.0 generated 11/13/2019 12:10:36 PM
    gfx_Panel(PANEL_SUNKEN, 441, 246, 108, 35, WHITE) ;

    // Panel15 1.0 generated 11/13/2019 12:10:38 PM
    gfx_Panel(PANEL_SUNKEN, 441, 291, 108, 35, WHITE) ;

    // Panel13 1.0 generated 11/13/2019 12:10:40 PM
    gfx_Panel(PANEL_SUNKEN, 441, 364, 108, 35, WHITE) ;

    // Panel14 1.0 generated 11/13/2019 12:10:43 PM
    gfx_Panel(PANEL_SUNKEN, 441, 416, 108, 35, WHITE) ;


    // ShelfReadings_Title 1.0 generated 11/13/2019 12:14:20 PM
    img_Show(hndl,iShelfReadings_Title) ;
    // Panel16 1.0 generated 11/13/2019 12:10:46 PM
    gfx_Panel(PANEL_SUNKEN, 560, 364, 50, 35, WHITE) ;

    // Panel17 1.0 generated 11/13/2019 12:10:48 PM
    gfx_Panel(PANEL_SUNKEN, 560, 416, 50, 35, WHITE) ;



